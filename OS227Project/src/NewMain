import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Main {
    private static int getSafeIntegerInput(Scanner scanner) {
        while (true) {
            try {
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("\u001B[31m" + "Invalid input. Please enter a number!" + "\u001B[0m");
                System.out.println();
                displayMenu();
            }
        }
    }

    public static void displayMenu() {
        System.out.println("Welcome to the CPU Scheduler Simulation Program!");
        System.out.println("Please choose an option:");
        System.out.println("1. First-Come-First-Serve (FCFS) Scheduling");
        System.out.println("2. Round-Robin (RR) Scheduling");
        System.out.println("3. Shortest Job First (SJF) Scheduling");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<PCB> jobQueue = new LinkedList<>();
        Queue<PCB> readyQueue = new LinkedList<>();
        String filePath = "C:\\Users\\HP\\Documents\\job.txt.txt"; // مسار الملف

        // قراءة الملف وإضافة العمليات إلى jobQueue
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                try {
                    String[] parts = line.split(":|;");
                    if (parts.length != 3) {
                        System.out.println("Invalid line format, skipping: " + line);
                        continue;
                    }

                    int id = Integer.parseInt(parts[0].trim());
                    int burstTime = Integer.parseInt(parts[1].trim());
                    int memoryRequired = Integer.parseInt(parts[2].trim());

                    PCB job = new PCB(id, burstTime, memoryRequired);
                    jobQueue.add(job);
                    System.out.println("Job " + id + " added to JobQueue: Burst Time = "
                            + burstTime + ", Memory = " + memoryRequired + " MB");
                } catch (NumberFormatException e) {
                    System.out.println("Error parsing line, skipping: " + line);
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading the file: " + e.getMessage());
            return; // إنهاء البرنامج إذا حدث خطأ في القراءة
        }

        // Load jobs to ready queue
        LoadToReadyQueue loader = new LoadToReadyQueue(jobQueue, readyQueue);
        loader.start();

        // انتظر حتى يتم تحميل العمليات في readyQueue
        synchronized (readyQueue) {
            while (readyQueue.isEmpty()) {
                try {
                    System.out.println("Waiting for jobs to be loaded into ReadyQueue...");
                    readyQueue.wait();
                } catch (InterruptedException e) {
                    System.out.println("Main thread interrupted.");
                }
            }
        }

        // عرض المنيو
        int choice;
        do {
            displayMenu();
            choice = getSafeIntegerInput(scanner);
            ExecuteReadyQueue scheduler = new ExecuteReadyQueue(readyQueue);

            switch (choice) {
                case 1:
                    System.out.println("Running First-Come-First-Serve (FCFS) Scheduling...");
                    scheduler.fcfsSchedule();
                    break;

                case 2:
                    System.out.println("Running Round-Robin (RR) Scheduling...");
                    scheduler.rrSchedule();
                    break;

                case 3:
                    System.out.println("Running Shortest Job First (SJF) Scheduling...");
                    scheduler.sjfSchedule();
                    break;

                case 4:
                    System.out.println("Exiting the program. Goodbye!");
                    break;

                default:
                    System.out.println("\u001B[31m" + "Invalid choice, please try entering a number from 1 to 4." + "\u001B[0m");
                    System.out.println();
            }
        } while (choice != 4);

        scanner.close();
    }
}
